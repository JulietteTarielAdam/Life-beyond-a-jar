---
title: "Analysis Hovering"
date: "`r Sys.Date()`"
author: "Juliette Tariel-Adam"
format: 
   html:
    embed-resources: true
    self-contained-math: true
editor_options: 
  chunk_output_type: console
knitr:
  opts_chunk:
    fig-align: center
    out-width: "100%"
---

```{r}
#| include: false
# Run the scripts that load the data and that contains the functions to plot and do the linear models
source("Script/Load-data.R")
source("Script/Functions/Plots.R")
source("Script/Functions/Linear-model.R")
```

To analyse the amount of time the fish was hovering on the 204 trials with hovering time > 0, we tried:
+ glm with zero and zero-inflated poisson distribution, but the fit was not good.
+ a transformation log(x +1), see below, but only a log(x+103) was good enough to achieve normal distribution. But there was a huge problem in hetereogeneity of variance with this model. 
+ a linear model on the remaining 204 trials during which hovering happened. But the variance of residuals was increasing with the fitted values.
+  a linear model with weighted least squares to stabilise the variance accross the fitted values. The normality was not great but ANOVA are robust to the assumption of normality. It is the model we chose. 

::: {.panel-tabset}

# Poisson distribution

Y variable = amount of time spent hovering during a trial, rounded to be an integer in seconds

```{r}
# poisson on all hovering data
mHovering <- glmmTMB(round(Hovering,0) ~ Tank + Time + Filter + (1|Fish), data = data, family =poisson)
mHovering_res <- simulateResiduals(mHovering)
plot(mHovering_res)

# zero inflated poisson on all hovering data
mHovering <- glmmTMB(round(Hovering,0) ~ Tank + Time + Filter + (1|Fish), data = data, family =poisson,ziformula=~1)
mHovering_res <- simulateResiduals(mHovering)
plot(mHovering_res)

# poisson on positive hovering data
mHovering <- glmmTMB(round(Hovering,0) ~ Tank + Time + Filter + (1|Fish), data = data[data$Hovering >0,], family =poisson)
mHovering_res <- simulateResiduals(mHovering)
plot(mHovering_res)
```

Fit are not good

# Attempt transformation log(Y + 1)

Y variable = amount of time spent hovering during a trial. 

Only considering positive hovering data Y > 0 

```{r}
ggplot(data, aes(x = log(Hovering + 1)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 5)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 10)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 15)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 20)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 25)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 30)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 50)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log(Hovering + 70)))+
  geom_histogram(bins = 15, fill = grey(0.75), color="black")
ggplot(data, aes(x = log10(Hovering + 103)))+
  geom_histogram(bins = 10, fill = grey(0.75), color="black")


mHovering <- lmer(log(Hovering+103)~Tank + Time + Filter + (1|Fish), data = data)
check_model(mHovering, check = "normality")
check_model(mHovering, check = "homogeneity")
```

We had to go log(y + 103) which is not a problem per se, because the value to add depends on the scale of the variable. Hovering varies between 0 and 600. 

But anyway the fit is not good with increase of variance in residuals with fitted values.

# Linear model

Y variable = amount of time spent hovering during a trial. 

Only considering positive hovering data Y > 0 

```{r}
mHovering <- lmer(Hovering ~ Tank + Time + Filter + (1|Fish), data = data[data$Hovering>0,])
lm_diagnosis(mHovering)
plotResiduals(mHovering, form =  data[data$Hovering>0,]$Tank)

```

Problem homogeneity of variance, increase of residual variance with fitted values

# Linear model with power 

In Weighted Least Squares (WLS, each observation is given a weight inversely proportional to its variance, helping to stabilize the variance across the fitted values.

```{r}
mHovering <- lme(Hovering ~ Tank + Time + Filter, random = ~1 | Fish, data = data[data$Hovering>0,], weights = varPower(), control = lmeControl(maxIter = 20000))
plot(mHovering, resid(., type = "pearson") ~ fitted(.), aspect = 1, pch = 21, abline = 0)
qqnorm(resid(mHovering, type = "pearson"))
qqline(resid(mHovering, type = "pearson"))
ranefPlot <- ranef(mHovering, level = 1)
qqnorm(ranefPlot$`(Intercept)`)
qqline(ranefPlot$`(Intercept)`)
boxplot(resid(mHovering, type = "pearson")~ Tank, data =  data[data$Hovering>0,])
```

The normality is not great but ANOVA are robust to the assumption of normality.

However, the model is not working when including Order. The nlme package does not handle rank-deficient models. The lmer does not handle increasing error variance with fitted values automatically... Below I tried to implement increasing error variance with fitted values using lmer package.

```{r}
mHovering <- lmer(Hovering ~ Tank + Time + Filter + Order + (1 | Fish), data = data[data$Hovering>0,])
weights_hovering <- data.frame(abs.res = abs(residuals(mHovering)),
                               fit.values = fitted(mHovering))
ggplot(data = weights_hovering , aes(y = abs.res, x = fit.values)) +
  geom_point()+
  geom_smooth(method = "loess", se = FALSE)
var_model <- lm(abs.res ~ fit.values + I(fit.values^2), data = weights_hovering)
var_model2 <- lm(abs.res ~ fit.values, data = weights_hovering)
AIC(var_model, var_model2)
# A quadratic relationship seems more appropriate to predict the residuals from the fitted vallyes
weights_hovering$var <- predict(var_model)
# Calculate weights as the inverse of the variance estimate
weights_hovering$weights <- 1 / weights_hovering$var
# The higher the variance, the less weight.
# So less weight/importance given to high fitted values because they are less reliable = they have a strong error associated to them
mHovering <- lmer(Hovering ~ Tank + Time + Filter + Order + (1 | Fish), data = data[data$Hovering>0,],
                  weights = weights_hovering$weights)
plot(mHovering, resid(., type = "pearson") ~ fitted(.), aspect = 1, pch = 21, abline = 0)
plot(mHovering, abs(resid(., type = "pearson")) ~ fitted(.), aspect = 1, pch = 21, abline = 0)
anova(mHovering, ddf = "Kenward-Roger", type = 2)


```

It works for the adjusting the increasing variance with fitted values. But negative SumSq values for Tank, Wtf? 


::: 

